// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IOptimismContract {
    function mintNFT(address recipient) external returns (uint256);
}

contract BaseContract {
    address public optimismContractAddress;
    IOptimismContract public optimismContract;

    event PacketReceived(address indexed from, bytes data);

    constructor(address _optimismContractAddress) {
        optimismContractAddress = _optimismContractAddress;
        optimismContract = IOptimismContract(_optimismContractAddress);
    }

    // Function to receive cross-chain packet from Optimism
    function receivePacket(bytes calldata data) external {
        // Decode the packet
        (address recipient, uint256 amount) = abi.decode(data, (address, uint256));

        // Perform any necessary operations with the received data
        // For example, mint NFT on Optimism
        optimismContract.mintNFT(recipient);

        // Emit an event indicating the packet is received
        emit PacketReceived(msg.sender, data);

        // Send acknowledgment back to Optimism via Universal Channel
        sendAcknowledgment();
    }

    // Function to send acknowledgment back to Optimism
    function sendAcknowledgment() internal {
        // Perform sending acknowledgment via Universal Channel
        // Implementation details for Universal Channels are not provided here
        // It could be something like:
        // universalChannel.sendAcknowledgment();
    }
}
