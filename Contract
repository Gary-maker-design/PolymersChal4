// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IOptimismContract {
    function sendUniversalPacket(bytes calldata packet) external;
}

contract BaseContract {
    address public optimismContractAddress;
    IOptimismContract public optimismContract;

    event PacketReceived(address indexed from, bytes data);

    constructor(address _optimismContractAddress) {
        optimismContractAddress = _optimismContractAddress;
        optimismContract = IOptimismContract(_optimismContractAddress);
    }

    // Function to receive universal packet from Optimism
    function onRecvUniversalPacket(bytes calldata data) external {
        // Decode the packet
        (address recipient, uint256 amount) = abi.decode(data, (address, uint256));

        // Perform any necessary operations with the received data
        // For example, mint NFT on Base
        mintNFT(recipient);

        // Emit an event indicating the packet is received
        emit PacketReceived(msg.sender, data);

        // Send acknowledgment back to Optimism
        sendAcknowledgment();
    }

    // Function to mint NFT on Base
    function mintNFT(address recipient) internal {
        // Implementation details for minting NFT on Base
        // This function is not provided here
    }

    // Function to send acknowledgment back to Optimism
    function sendAcknowledgment() internal {
        // Construct acknowledgment packet
        bytes memory acknowledgment = abi.encodeWithSignature("onUniversalPacketAcknowledgement()");

        // Send acknowledgment back to Optimism
        optimismContract.sendUniversalPacket(acknowledgment);
    }
}

